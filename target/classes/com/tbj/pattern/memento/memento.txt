凌晨两点，魔都某看守所六号牢房。

                 “叮咣...”

                 一道开门声陡然响起，牢房中的韩雨露心中一紧，明亮的眼眸看着来人，不过眼神之中的一丝惊恐却是掩饰不去。

                 来人正是李刚和李双江，只是此时二人眼中无神，如果仔细观察，可以看出这两个人的动作十分蹩脚，只是韩雨露此时并未注意这些细节，而是犹如等待宣判一般，惶恐不安的等待着二人说话。

                 “韩小姐，恭喜你，你可以出去了。”脸上勉强挤出一丝僵硬的笑容，李刚向前一步说道。

                 好消息从天而降，韩雨露不禁愣了一瞬间，不过很快就反应过来，诱人的小嘴没有发出声音，只是微笑的点了点头。

                 “肯定是爸爸救了我。”没有任何怀疑，韩雨露心中暗暗的想到。

                 两男一女走在看守所的道路上，途中偶尔碰到的工作人员，像是商量好了似的，全部低头不语，仿佛什么事都未发生一般，如此奇怪的场景，实在让韩雨露一时之间摸不着头脑。

                 按照常理来说，这些人看到有人被释放，应该不会如此安静，而且韩雨露清楚的记得当初自己被带到看守所时，眼前的二人全部都是一脸猥琐的表情盯着自己的两个山丘，而此时，二人一直走在自己前方，完全对自己视若无睹。

                 这倒不是韩雨露天性开放，而是换做任何人，想必都会对身边的人陡然的变化产生疑虑，况且一路上又是如此诡异，这更是让韩雨露慌乱之中，已然在不知不觉间香汗淋漓。

                 一路从牢房到看守所门口，徒步也仅有不到十分钟的路程，而韩雨露却觉得走的特别慢，好不容易来到了看守所门口，却是空无一人。              

                 “爸爸为什么没来接我？”看到眼前的场景，韩雨露心中不自觉的升起一丝疑问。

                 “韩小姐，我们给你拦一辆出租车，你打车回去吧。”此时说话的已经换成了李双江，二人皆是面无表情的看着眼前的伊人。                 

                 魔都的出租车深夜并不好拦，不过好在运气还不错，没过多久，一辆出租车便被李双江拦下，待得韩雨露坐进去以后，李双江便扔给了司机两张毛爷爷，僵硬的说了句：“将这位小姐送到家里。”

                 李双江说话的同时，还专门钻到车窗里看了看司机的职照。李刚也没闲着，专门走到出租车后面，看着车牌号轻声默念了几遍，才慢慢的走回李双江身边，到此李双江才朝司机摆了摆手，示意司机出发。

                 韩雨露一直看着二人对自己似乎特别关心的样子，心中已经疑问满天，却是不敢多问。不过韩雨露不知道的是，当出租车刚驶出几十米之后，整个看守所的工作人员瞬间全部消失不见，犹如人间蒸发了一般，场面极其诡异。

              

                 魔都某出租屋。

                “人算不如天算，天算不如不算。老子计划的这么周密，竟然还是被人给看到了。”说话之人正是小左，只不过此时的小左脸色十分不好。

                 经过一系列的计划之后，原本小左是打算放出韩雨露之后，自己隐身跟着韩雨露，一来可以确保韩雨露的安全，二来也可以看看韩雨露的家在何处。可是计划实施的过程中出现了一些变故，导致小左不得不让韩雨露自己做出租车回去。

                 原来小左在行动之前，花费了整整两个小时，才找到了一家出售蒙汗药的隐秘药店，随后小左便借助着飞行和隐身的异能，偷偷在看守所所有的饮水机里放入了大量的蒙汗药。待得所有工作人员都昏睡之后，小左才使用飞行将众人一一带回自己的出租屋。

                 意外就在小左带走最后两个工作人员的时候发生了，三人正在空中飞行，小左意外的发现其中一人竟然已经醒了，出乎意料的是这人醒来之后，便被高空的刺激吓得大喊大叫，导致另外一人也在途中醒来，最后还是小左在空中威胁二人，让二人自己服下剩余的蒙汗药，才制止了二人凄厉的叫喊声。

                 无奈之下，小左放下二人之后，便匆匆忙忙的回到看守所，凭借着之前的分身制造之法，快速的制造了一堆看守所人员的分身之后，小左就立即马不停蹄的回到了住处。小左此时已经打算在住处控制分身，他必须看着昏睡的众人，以免这坑爹的假药再闹出什么意外。

                 虽说距离较远的时候，控制诸多分身有些勉强，但小左还是将韩雨露顺利的放了出来，而现在小左要处理的，则是最棘手的问题，那就是自己的能力已经暴露了。

                 尽管小左此时完全可以干掉知情的二人，但小左毕竟不是心狠手辣之辈，如此狠毒的事情，小左自问还是做不到的。

      

                 平复了一下烦躁的心情，遇到问题的小左还是不自觉的想到了设计模式，仿佛设计模式就是现实中的问题大全，可以一解千愁一般。事实也确实如此，凭借着设计模式的理论，小左已经发掘了很多异能的特殊用法，甚至领悟新的异能，那种感觉，就犹如修炼一本内功心法一般。

                 “度娘啊，GOF啊，你们可要帮助下老爹啊，实在不行，我只能使出隐身恐吓一下这两个家伙了，只是这样始终难以让人安心啊。”说话的同时，小左已经开始在度娘上快速的寻找起来。

                 “咦？这个备忘录模式似乎和我遇到的问题有一些关系，只是为啥没有遗忘模式。我擦！”尽管有些郁闷，小左还是死死的盯着备忘录模式的定义，试图找到一点灵感。


定义：在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。

定义里说可以捕获一个对象的内部状态，在对象之外保存之后，就可以恢复该对象保存的状态。看这样这个定义，总觉的似乎是和我现在的问题有点关联，可是到底应该如何使用呢？

哎，管他呢，先把我现在所遇到的问题试图描述一下再说，这样比较好找出解决办法，

如果是现在来说的话，应该只有一个类，就是表示人类，而人类应该有一个故事系列，都是从小到大的记忆。

/**
 * @author bjtang
 * @date   2017年7月27日  
 * @desc   人类
 */
public class Person {
	
	/**姓名**/
	private String name;
	
	/**保存人从小到大的记忆,不能删除,不能修改,可以添加**/
	private List<String> storeList = new ArrayList<String>();
	
	public Person(String name){
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	/***返回不能被外部修改的List**/
	public List<String> getStoreList(){
		return Collections.unmodifiableList(storeList);
	}
	
	/***可以添加**/
	public void addStore(String store){
		storeList.add(store);
	}

	@Override
	public String toString() {
		StringBuffer stringBuffer = new StringBuffer();
		for(String store : storeList){
			stringBuffer.append(store);
		}
		return stringBuffer.toString();
	}
}

这样的话，现在情况就是两个看守所的人员都记住了我们可以飞行这件事，而且还看到了我的长相。

public class Client {

	public static void main(String[] args) {
		
		Person personA = new Person("看守所人员A");
		Person personB = new Person("看守所人员B");
		
		//看守所人员A的记忆
		personA.addStore("我小时候偷西瓜被抓了;");
		personA.addStore("初中的时候我成绩特别差;");
		
		//看守所人员B的记忆
		personB.addStore("小时候我留了个小辫子;");
		personB.addStore("我高中成绩比较好;");
		
		System.out.println(personA);
		System.out.println(personB);
		
		//两个人共同的记忆
		personA.addStore("我今天看到了一个会飞的人,而且看清楚了他的长相;");
		personB.addStore("我今天看到了一个会飞的人,而且看清楚了他的长相;");
		
		System.out.println(personA);
		System.out.println(personB);
		
	}
	
}

system
 	 我小时候偷西瓜被抓了;初中的时候我成绩特别差;
	小时候我留了个小辫子;我高中成绩比较好;
	我小时候偷西瓜被抓了;初中的时候我成绩特别差;我今天看到了一个会飞的人,而且看清楚了他的长相;	
	小时候我留了个小辫子;我高中成绩比较好;我今天看到了一个会飞的人,而且看清楚了他的长相;


这个便是目前的现状了，这两个人全部记住了我的能力和长相，如果想想刚才的备忘录模式的定义，说是可以将一个对象恢复到保存的状态，那么放在这里，应该是要将一个人的记忆恢复到某一个时刻，
原来如此啊，哈哈。”瞬间顿悟的小左一时间像打了鸡血似的，完全没有了刚才的一脸愁容。

让我来看看备忘录模式的类图把，估计看完类图，解决问题的办法自然就浮现出来了。”说着小左便开始寻找度娘上备忘录模式的类图。

/pattern/src/main/java/com/tbj/pattern/memento/20130715023140500.jpg

看这个类图，有着三个角色，一个便是发起人（Originator）， 他不仅有自己的状态，而且还负责创建一个备忘录（memento）以及使用备忘录恢复自己的状态，而备忘录则记录了发起人的状态，至于最后一个角色管理者（caretaker）
则是用来管理备忘录 的，

这里发起人自然是人类，只不过现在人类要稍微改变一下，他需要提供创建一个备忘录以及使用备忘录恢复状态的操作，而备忘录和管理者都是需要新建的，只不过这里的管理者应该就是我的灵魂，”说道这里，小左的思路已经渐渐清晰起来，手下已经开始了代码的编写。

“先写一个备忘录的类吧，这个类如果形象的来称呼的话，应该叫记忆类。”

/**
 * @author bjtang
 * @date   2017年7月27日  
 * @desc   用于存储人类某一个时刻的记忆状态，以便于需要的时候恢复用(备忘录)
 */
public class Member {

	private List<String> storeList;

	public List<String> getStoreList() {
		return storeList;
	}

	public void setStoreList(List<String> storeList) {
		this.storeList = storeList;
	}
	
}

“再来便是人（Person）类的更改了，应该是这样的。”

/**
 * @author bjtang
 * @date 2017年7月27日
 * @desc 人类
 */
public class Person {

	/** 姓名 **/
	private String name;

	/** 保存人从小到大的记忆,不能删除,不能修改,可以添加 **/
	private List<String> storeList = new ArrayList<String>();

	public Person(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	/*** 返回不能被外部修改的List **/
	public List<String> getStoreList() {
		return Collections.unmodifiableList(storeList);
	}

	/*** 用于获取某个人某个时刻的记忆 **/
	public List<String> getStoreListForce() {
		return new ArrayList<String>(storeList);
	}

	/** 将记忆恢复到某一时刻 **/
	public void setMember(List<String> storeList) {
		this.storeList = storeList;
	}

	/*** 可以添加 **/
	public void addStore(String store) {
		storeList.add(store);
	}

	@Override
	public String toString() {
		StringBuffer stringBuffer = new StringBuffer();
		for (String store : storeList) {
			stringBuffer.append(store).append("\n");
		}
		return stringBuffer.toString();
	}
}

“下面便是我的灵魂类了，它是一个记忆的管理者，可以搜集人的记忆，也可以将人的记忆强行固定或者说恢复到某一个阶段。”

/**
 * @author bjtang
 * @date   2017年7月27日  
 * @desc   灵魂类，用于管理人记忆的备忘和恢复到某一时刻
 */ 
public class Soul {
	
	private final static Map<String, Member> map = new HashMap<>();
	
	private Soul(){}

	/**
	 * 从对象中获取此人此时刻的记忆,存储到备忘录中
	 * @param person
	 */
	public static void getMember(Person person){
		Member member = new Member();
		member.setStoreList(person.getStoreListForce());
		map.put(person.getName(), member);
	}
	
	/**
	 * 将此人的记忆回退到指定的时刻
	 * @param person
	 */
	public static void forceFixMember(Person person){
		person.setMember(map.get(person.getName()).getStoreList());
	}
}

  ““现在就让我试试备忘录模式的威力吧，哈哈。”小左得瑟的说道。
  
  public class Client {

	public static void main(String[] args) {
		
		Person personA = new Person("看守所人员A");
		Person personB = new Person("看守所人员B");
		
		//看守所人员A的记忆
		personA.addStore("我小时候偷西瓜被抓了;");
		personA.addStore("初中的时候我成绩特别差;");
		
		//看守所人员B的记忆
		personB.addStore("小时候我留了个小辫子;");
		personB.addStore("我高中成绩比较好;");
		
		//获取当前时刻看守员人A和看守人员B的记忆
		Soul.getMember(personA);
		Soul.getMember(personB);
		
		//两个人共同的记忆
		personA.addStore("我今天看到了一个会飞的人,而且看清楚了他的长相;");
		personB.addStore("我今天看到了一个会飞的人,而且看清楚了他的长相;");
		
		Soul.forceFixMember(personA);
		Soul.forceFixMember(personB);
		System.out.println(personA);
		System.out.println(personB);
		
	}
	
}

system:
	 我小时候偷西瓜被抓了;
	 初中的时候我成绩特别差;
	
	 小时候我留了个小辫子;
	 我高中成绩比较好;
 
还是让我先来总结一下备忘录模式的特点吧。

对于现在的情况来说，备忘录模式应该有以下几点好处。

1、人类可以将自己的记忆保存在外部，使得备份的功能不会影响人类本身，而人类则只需要提供获取记忆和恢复记忆的方法。
2、对于人类记忆的备份和恢复，人类自身不需要关心，而是使用灵魂的人关心。
3、如果一个人的记忆丧失或出现问题，可以很轻松的恢复到原来的记忆。

如果换成专业的语言来说的话，则应该是一下几点了。
1、发起人备份自己的状态不需要自己管理，可以备份到外部，这样可以很好的保持封装的边界，这样做的意义在于可以给外部提供一个简单的操作该对象内部状态的接口。保持封装的边界这应该算是最重要的优点了。
2、发起人状态的备份与恢复，发起人自身不需要管理与操作，而是有客户端自行按需要处理。
3、如果发起人的状态出现问题，可以很轻松的恢复。

备忘录模式的缺点。
1、如果一个人的岁数比较大，记忆比较多的话，全部备份会让存储记忆的灵魂压力很大。
2、由于记忆是由人类自己提供给灵魂的，所以灵魂在存储记忆的时候可能会一股脑存储，无法预测一个人的记忆是否庞大。
3、如果恢复人的记忆成功率比较低的话，使用备忘录模式可能会导致恢复失败，这样的话可能会使人的记忆处于不正确的状态，比如缺失或者记忆混乱。

这些缺点如果换成专业的语言来说的话，则是一下几点。
1、如果全部备份发起人的状态，或者其中有占用内存比较大的属性（比如说一个长数组），则会让备忘录模式的使用代价昂贵。
2、由于备份的信息是由发起人自己提供的，所以管理者无法预知备份信息量的大小，所以在客户端使用时，可能一个操作占用了很大的内存，但客户并不知晓。
3、当发起人的状态改变的时候，有可能这个状态无效，如果状态改变的成功率不高的话，可以采取“假如”协议模式，“假如”的意思是指，我们一直假如状态的改变会失败，从而对此作出一系列准备工作，不过很明显，如果状态的
成功率很高，则这样做的收益甚微。

感觉备忘录模式最大的缺点就是备份信息所占用的资源可能会很庞大，这直接导致的就是我的灵魂压力颇大呀，不过还有一点，就是在使用备忘录模式的时候，必须关注一个对象整个状态历史，才可以使用，就是因为这个，
所以现在无法将两个人的记忆恢复到加到我之前了，因为我根本没有备份他们之前的记忆啊。

想到这个，小左不禁郁闷非常，不过片刻之后，小左还是迅速的调整好了心态，似有所悟说道：“不过这倒算不上缺点，只能说是使用备忘录模式的前提。

还是看一下类图，看看有没有什么变通的方法。

/pattern/src/main/java/com/tbj/pattern/memento/updater/20130716055332218.jpg

“现在的类图与标准的备忘录模式有些出入，一个是其中一对一的聚合关系已经被我改成了一对多，还有一个就是灵魂类对人类的依赖关系，这都是我针对现实状况对设计模式做出的调整。尽管已经对现实情况做出了相应的调整，不过关于两个人记忆备份的问题依旧是看不出来什么解决方案啊。”

                     略微一顿，小左叹了口气，继续暗暗的摇头道：“看来是没有办法了，只能退而求其次。虽然你们会忘掉所有的过往，不过我会想办法弥补你们的。”

                      

                     魔都某看守所，所长办公室。

                    “你们两个怎么回事，不想活了是吧。”一个满脸胡茬的中年人，此时正冲着面前的二人大发雷霆。

                    “所长，我们没有私自释放韩小姐啊。实在是冤枉啊...”说话的正是李刚，只不过此时，李刚与身边的李双江都是一脸憋屈的表情。

                    “放NMD狗臭屁！这监控录像里就是你们两个把人给放走了，你现在跟我说你们没有？”听到李刚的无力辩解，中年人更加怒气冲天，大爆粗口的骂道。

                     就在此时，一个身材瘦小的青年突然闯了进来，中年所长一看便认出了此人，正是看守所里的工作人员小赵，看到小赵不打招呼就硬闯进来，正在气头上的中年所长自然是怒气更甚，愤怒的吼道：“你这个家伙，什么事不打招呼就进来了。先给老子滚出去。”

                    “你说话声音这么大干嘛，吵着人家了。傻X，嘿嘿...”小赵像是不知道中年所长的愤怒一般，傻笑着说道。

                     没有料到会出现这样的情况，中年所长顿时一脸铁青，指着李刚和李双江二人，面目狰狞的说道：“去！给我拖出去狠狠的打，一会回来再跟你们俩算账。NND，我看你们是都不想活了。”




 
 




























































































































