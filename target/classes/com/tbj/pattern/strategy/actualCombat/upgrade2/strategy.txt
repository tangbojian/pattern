1:描述
现在看来,我们已经使用简单工厂,注解,反射等技术将策略模式优化的非常完美了,我们可以随意新增策略,并且不需要修改原有的任何代码.
但是：其实我们的设计还是有些不完美的,因为它无法支持策略的重叠,这是什么意思呢？
就是说我们同一时间只能采用一种策略,假设我们的商店现在有这么一个需求,假设到端午节了,我们的商店要采取满1000返200,满2000返400的方式,并且原有的打折还要继续,这就相当于将返现金的
活动于打折重叠计算了。
比如我是个金牌会员,假设我买了2000的东西,那么计算方式应该先减去400为1600,再打五折,为800,最后这个会员只需要付800.
这就相当将两个策略重叠使用了,我们现在的设计无法支持这种方式,那咋么办?
刚才的需求,也是在提醒我们在设计一个系统时要考虑全面,我们虽然不应该考虑一些本不存在或者发生概率很小的需求,但像商店或者商场这种灵活的促销方式,却是我们刚开始就改考虑到的.
现在我们的需求变了，即我们任意的策略都可以随意组合，并且我们要求工厂帮我们自动判断，并将策略叠加返回给我们，那么针对上面的设计我们还需要改善，如果要改善一个设计，我们就需要考虑
现有的设计不能支持什么需求。
1：我们只能根据客户消费的总金额去处理，而不能根据客户当次消费的金额去处理。
2：我们的设计只能支持单一策略，不能支持策略的叠加。
为了满足这两个需求，我们需要添加一个类型的注解，去针对当次消费产生计费策略，另外，我们需要让策略工厂能够产生叠加的策略接口。针对上述需求，我们来设计我们的代码


