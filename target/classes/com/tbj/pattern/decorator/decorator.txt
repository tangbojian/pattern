定义：装饰器模式
装饰器模式是在不必改变原类文件和使用继承的情况下，动态的扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。

1：不改变原类文件
2：不使用继承
3：动态扩展

上述三句话一语道出了装饰器模式的特点，结构图见 descrator.jpg

从图中可以看出，我们装饰的是一个接口的任何实现类，而这些实现类也包括装饰器本身，装饰器本身也可以再被装饰
另外，这个类图只是装饰器模式的完整结构，但其实里面有很多可以变化的地方，LZ给出如下两条
1，Component接口可以是接口也可以是抽象类，甚至可以是一个普通的父类（强烈不推荐）
2，装饰器的抽象父类Decorator并不是必须的。
那么我们将上述标准的装饰器模式，用我们熟悉的JAVA 代码给诠释一下。首先是带装饰的接口Component。

public interface Component {

	void method();
	
}

接下来便是我们的一个具体的接口实现类,也就是俗称的原始对象,或者说待装饰对象

public class ConcreteComponent implements Component {

	@Override
	public void method() {
		System.out.println("原来的方法");
	}

}

下面便是我们的抽象装饰器父类,它主要是为装饰器定义我们需要装饰的目标是什么,并对Component进行基础的装饰.

public class Decorator implements Component {
	
	protected Component component;
	
	public Decorator(Component component) {
		super();
		this.component = component;
	}

	@Override
	public void method() {
		component.method();
	}

}

再来便是我们具体的装饰器A 和装饰器B

public class ConcreteDecoratorA extends Decorator {

	public ConcreteDecoratorA(Component component) {
		super(component);
	}
	
	public void methodA(){
		System.out.println("被装饰器A扩展的功能");
	}
	
	public void method() {
		System.out.println("针对该方法加一层A包装");
		super.method();
		System.out.println("A包装结束");
	}
}

public class ConcreteDecoratorB extends Decorator{

	public ConcreteDecoratorB(Component component) {
		super(component);
	}
	
	public void methodB(){
		System.out.println("被装饰器B扩展的功能");
	}
	
	public void method() {
		System.out.println("针对该方法加一层B包装");
		super.method();
		System.out.println("B包装结束");
	}
	
}

public class Main {

	public static void main(String[] args) {
		
		Component component = new ConcreteComponent();
		System.out.println("-----------------------------");
		component.method();
		
		ConcreteDecoratorA concreteDecoratorA = new ConcreteDecoratorA(component);
		System.out.println("---------------------------------");
		concreteDecoratorA.method();
		concreteDecoratorA.methodA();
		
		ConcreteDecoratorB concreteDecoratorB = new ConcreteDecoratorB(component);
		System.out.println("---------------------------------");
		concreteDecoratorB.method();
		concreteDecoratorB.methodB();
		
		//装饰成A以后在装饰成B
		concreteDecoratorB = new ConcreteDecoratorB(concreteDecoratorA);
		System.out.println("---------------------------------");
		concreteDecoratorB.method();
		concreteDecoratorB.methodB();
		
		
		
	}
	
}

run:
-----------------------------
原来的方法
---------------------------------
针对该方法加一层A包装
原来的方法
A包装结束
被装饰器A扩展的功能
---------------------------------
针对该方法加一层B包装
原来的方法
B包装结束
被装饰器B扩展的功能
---------------------------------
针对该方法加一层B包装
针对该方法加一层A包装
原来的方法
A包装结束
B包装结束
被装饰器B扩展的功能

从此我们可以看出，我们首先是使用的原始的类方法，然后分别让A 和 B装饰玩以后在调用， 最后我们将两个装饰器一起使用，在调用该接口定义的方法。

上述当中，我们分别对待类进行了原方法的装饰和新功能的增加，methodA和methodB 就是新增加的功能， 这些都是装饰器可以做的，当然两者并不一定兼有，但一般至少会有一种，否则也就失去了
装饰的意义。

另外，文章开篇就说到IO与装饰器的情缘，相信各位就算不太清楚，也都大概听说过JAVA的IO是装饰器模式实现的，所以LZ也不再废话，再给出一个标准的模板示例之后，直接拿出IO示例，我们真强
实弹的来。

下面LZ直接给出IO包中的部分装饰过程，上面LZ加了详细的注解以及各个装饰器的功能演示，各位可以与上面标准的装饰器模式对比一下，LZ不得不感叹，IO与装饰器的孽缘。

代码详见：com.tbj.pattern.decorator.io.IOTest

说下代理模式和装饰器模式的区别：
刚开始读装饰器模式的时候，感觉装饰器模式和代理模式非常的相似，读完代理模式发现其实不是那么一回事：
1：代理模式是为了辅助原方法完成一些事情，比如：我要统计我现有类每个方法的执行时间，我们可以使用代理模式，也可以使用装饰器模式。
2：如果我们要基于现有类实现新的功能：比如：我现在有一个普通的计算机类，可以进行加法和减法操作，我想在此基础上新增一个有乘法和除法的类，这时候我们就可以使用装饰器模式。


