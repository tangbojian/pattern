本次LZ给各位介绍状态模式，之前在写设计模式的时候，引入了一些小故事，二十章职责连模式是故事版的最后一篇，之后还剩余四个设计模式，LZ会依照原生的方式去解释这几个设计模式，特别是原型模式和解释器模式，会包含一些其它的内容。

好了，接下来，我们先来看看状态模式的定义吧。
定义：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。

上述是百度百科中对状态模式的定义，定义很简单，只有一句话，请各位形象的去理解这句话，它说当状态改变时，这个对象的行为也会变，而看起来就像是这个类改变了一样。

这正是应验了我们那句话，有些人一旦发生过什么事以后，就像变了一个人一样，这句话其实与状态模式有异曲同工之妙。
我们仔细体会一下定义当中的要点：
1：有一个对象，它是有状态的。
2：这个对象在状态不同的时候，行为不一样。
3：这些状态是可以切换的，而非豪无关系。

前面两点比较好理解，第三点有时候容易给人比较迷惑的感觉，什么叫这些状态是可以切换的，而非毫无关系、

举个例子，比如一个人的状态，可以有很多，像生病和健康，这是两个状态，这是有关系并且可以转换的两个状态，再比如睡觉，上班，休息，这也算是一组状态，这三个状态也是有关系并且可以相互转换的。

那如果吧生病和休息这两个状态放在一起，就显得毫无意义了，所以这些状态应该是一组相关并且可以相互切换的状态。

下面我们来看下状态模式的类图。

/pattern/src/main/java/com/tbj/pattern/state/20130806112826031.jpg

类图中包含三个角色

Context:她就是那个含有状态的对象，他可以处理一些请求，这些请求最终产生的响应会与状态有关。
State：状态接口，它定义了每一个状态的行为集合，这些行为会在Context中得以使用。
ConCreteState：具体状态，实现相关行为的具体状态类。

如果针对刚才对于人的状态的例子来分析，那么人(Person)就是Context，状态接口依然是状态接口，而具体的状态类，则是睡觉，上班，休息这一系列状态。

不过LZ也看过不少状态模式的文章和帖子，包括<大话设计模式>当中，都举的是有关人的类子，

/**
 * @author bjtang
 * @date 2017年8月14日
 * @desc 人类
 */
public class People {

	private String name;
	private State state;
	
	public People(String name, State state){
		this.name = name;
		this.state = state;
	}
	
	public void behavior(){
		System.out.println(name + "正在 " + state.behavior());
	}

}


public interface State {

	String behavior();
	
}


public class RestState implements State {

	@Override
	public String behavior() {
		return "休息ing";
	}

}

public class SleepState implements State{

	@Override
	public String behavior() {
		return "睡觉ing";
	}

}


public class WorkState implements State{

	@Override
	public String behavior() {
		return "上班ing";
	}

}

public class Client {

	public static void main(String[] args) {
		
		State state = new SleepState();
		State state2 = new WorkState();
		State state3 = new RestState();
		
		People people = new People("tbj", state);
		people.behavior();
		people = new People("tbj", state2);
		people.behavior();
		people = new People("tbj", state3);
		people.behavior();
		
	}
	
}

tbj正在 睡觉ing
tbj正在 上班ing
tbj正在 休息ing

下面来总结一下状态模式的优点：
1：如果没有状态模式，那么我们的代码中必不可少的是if else 判断，
2:使用多态替换条件判断，这样我们的代码扩展性更强，比如要增加一些状态，假设有 玩游戏， 陪女朋友逛街， 看电影等等，会非常容易
3：状态的转换更加简单安全，简单体现在状态的分离，因为我们吧一堆if else 分割成了若干代码段放在几个具体的状态类中，所以转换起来当然更简单，而且每次转换的时候我们只需要关注一个固定状态到其他状态的转换。安全体现
在类型安全，我们设置上下文状态时，必须是状态接口的实现类。

状态模式适用于某一个对象的行为取决于该对象的状态，并且该对象的状态在运行时会发现转换，又或者很多 if else 循环，而这些判断只是因为状态不同而不断的切换行为。


状态模式也有它的缺点，不过它的缺点和大多数设计模式相似，有两点：
1：会增加类的数量
2：是系统的复杂性增加。

尽管状态模式有这样的缺点，但是往往我们牺牲复杂性去换取高的可维护性和扩展性是相当值得，除非增加复杂性以后，对于后者的提升微乎其微。

状态模式在项目中也算是较经常会碰到的设计模式，但是通常情况下，我们还是在看到 if else 的情况下，对项目进行重构时使用，又或者你十分确定要做的项目会朝着状态模式发展，一般情况下，还是不建议在项目初期使用。




